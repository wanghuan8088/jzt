<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
	<!-- Load biz bean to Application context -->
	<!-- transaction management -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<context:annotation-config />
	<context:load-time-weaver weaver-class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
	<context:component-scan base-package="com.jzt.api"
		use-default-filters="false">
			
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
		<context:include-filter type="aspectj"
			expression="com.jzt.api.*.service.impl.*ServiceImpl" />
		<context:include-filter type="aspectj"
			expression="com.jzt.api.*.dao.impl.*DaoImpl" />
	</context:component-scan>
			
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter" >
					<constructor-arg value="UTF-8"></constructor-arg>
					</bean>
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	
	 <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">   
	    <property name="corePoolSize" value="15" />   
	    <property name="maxPoolSize" value="5000" />   
	    <property name="queueCapacity" value="1000" /> 
	    <property name="keepAliveSeconds" value="300" />  	    
	    <property name="waitForTasksToCompleteOnShutdown" value="true" />  	 	     
	  </bean>
	  
	  <!-- 线程执行器配置,用于任务注册 -->
	<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	 <property name="corePoolSize" value="10" />
	 <property name="maxPoolSize" value="100" />
	 <property name="queueCapacity" value="500" />
	</bean>
	

	<!-- 启动触发器的配置开始 -->  
		<!--  
    <bean name="startQuertz" lazy-init="false" autowire="no"  
        class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
        <property name="triggers">  
            <list>  
            	<ref bean="cronRedisTrigger" />   
               <ref bean="cronReportTrigger" />
            </list>  
        </property>
        <property name="taskExecutor" ref="executor" />
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.jobStore.misfireThreshold">6000000</prop>
                <prop key="org.quartz.scheduler.skipUpdateCheck">true</prop>
                <prop key="org.quartz.scheduler.instanceId">AUTO</prop>
                <prop key="org.quartz.scheduler.jmx.export">true</prop>
            </props>
        </property>
    </bean> 
     -->
    <!-- 启动触发器的配置结束 --> 
  
  <!-- 调度的配置开始 -->  
  <!--  
    <bean id="cronRedisTrigger"  
        class="org.springframework.scheduling.quartz.CronTriggerBean">  
        <property name="jobDetail">  
            <ref bean="redisJobDetail" />  
        </property>  
        <property name="cronExpression">  
            <value>0 0 23 * * ?</value>  
        </property>  
    </bean> 
    --> 
    <!-- 调度的配置结束 -->  
  
    <!-- job的配置开始 -->  
    <!--  
    <bean id="redisJobDetail"  
        class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <property name="targetObject">  
            <ref bean="redisServiceImpl" />  
        </property>  
        <property name="targetMethod">  
            <value>refreshRedisDaily</value>  
        </property>  
    </bean>  
-->
    <!-- job的配置结束 -->  
    
    <!--report Job config start  -->
    <!--  
    <bean id="reportJobDetail"
     class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
     <property name="targetObject">
     	<ref bean="createReportServiceImpl"/>
     </property>
     <property name="targetMethod">
     	<value>refreshReportDaily</value>
     </property>
    </bean>
    -->
    <!--report job cron trigger  -->
    <!--  
    <bean id="cronReportTrigger"
    class="org.springframework.scheduling.quartz.CronTriggerBean">
    <property name="jobDetail">  
            <ref bean="reportJobDetail" />  
        </property>  
        <property name="cronExpression">  
            <value>0 10 0 * * ?</value>  
        </property>  
    </bean>
-->
</beans> 